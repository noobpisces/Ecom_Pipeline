from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains

from selenium.webdriver.common.by import By
import time
import threading
import json
import requests
from confluent_kafka import Producer
from webdriver_manager.chrome import ChromeDriverManager

# ---------------------------
# C·∫•u h√¨nh Kafka Producer
# ---------------------------
KAFKA_CONFIG = {"bootstrap.servers": "kafka:9092"}
TOPIC_MOVIES = "tmdb_movies"
TOPIC_CREWS = "tmdb_crews"
TOPIC_KEYWORDS = "tmdb_keywords"

TMDB_API_KEY = "eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmODFmNGU3ODhhZjU0NzVkMzg4ZDIxMzRiMmZlZGE2NiIsIm5iZiI6MTczMTkzNzAwMS4xOTkwMDAxLCJzdWIiOiI2NzNiNDJlOTgzYjY2NmE0ZTlhMmQ3NmMiLCJzY29wZXMiOlsiYXBpX3JlYWQiXSwidmVyc2lvbiI6MX0.Yp5aH_C1KA4iflmeDGQ7JrWi1NfwlKzRRUT20vJs47s"
TMDB_API_URL_MOVIES = "https://api.themoviedb.org/3/movie/{}?language=en-US"
TMDB_API_URL_CREWS = "https://api.themoviedb.org/3/movie/{}/credits?language=en-US"
TMDB_API_URL_KEYWORDS = "https://api.themoviedb.org/3/movie/{}/keywords"
HEADERS = {"accept": "application/json", "Authorization": f"Bearer {TMDB_API_KEY}"}

# ---------------------------
# C·∫•u h√¨nh Selenium
# ---------------------------
chrome_options = Options()
chrome_options.add_argument("--headless")
chrome_options.add_argument("--window-size=1920x3000")
chrome_options.add_argument("--disable-gpu")  # ƒê·∫£m b·∫£o s·ª≠ d·ª•ng GPU n·∫øu c√≥
chrome_options.add_argument("--disable-software-rasterizer")  # T·∫Øt ph·∫ßn m·ªÅm rasterizer
chrome_options.add_argument("--no-sandbox")  # C·∫ßn trong Docker ho·∫∑c m√¥i tr∆∞·ªùng kh√¥ng c√≥ giao di·ªán ng∆∞·ªùi d√πng
chrome_options.add_argument("--disable-dev-shm-usage")  # C·∫ßn khi ch·∫°y tr√™n Docker ho·∫∑c m√¥i tr∆∞·ªùng h·∫°n ch·∫ø
chrome_options.add_argument("--disable-blink-features=AutomationControlled") 
chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36")
chrome_options.binary_location = "/usr/bin/chromium"
service = Service("/usr/bin/chromedriver")  # ho·∫∑c d√πng ChromeDriverManager n·∫øu b·∫°n c·∫ßn ƒë·ªông

driver = webdriver.Chrome(service=service, options=chrome_options)
driver.get("https://www.themoviedb.org/movie")
time.sleep(2)

# X·ª≠ l√Ω cookie n·∫øu c√≥
try:
    cookie_button = driver.find_element(By.XPATH, "//button[contains(text(), 'Accept All Cookies')]")
    cookie_button.click()
except:
    pass

# ---------------------------
# H√†m h·ªó tr·ª£
# ---------------------------
def fetch_data(movie_id, url):
    """G·ªçi API TMDB ƒë·ªÉ l·∫•y d·ªØ li·ªáu phim"""
    response = requests.get(url.format(movie_id), headers=HEADERS)
    return response.json() if response.status_code == 200 else None

def send_to_kafka(producer, data, topic):
    """G·ª≠i d·ªØ li·ªáu phim v√†o Kafka"""
    try:
        producer.produce(topic, key=str(data["id"]), value=json.dumps(data))
        producer.poll(0)
        print(f"‚úÖ G·ª≠i phim ID {data['id']} v√†o Kafka! TOPIC: {topic}")
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i phim ID {data['id']}: {e}, TOPIC: {topic}")

# def process_movie_ids(movie_ids):
#     """G·ªçi API l·∫•y th√¥ng tin phim song song v√† g·ª≠i v√†o Kafka"""
#     producer = Producer(KAFKA_CONFIG)
#     threads = []

#     def worker(movie_id):
#         movie_data = fetch_data(movie_id, TMDB_API_URL_MOVIES)
#         crew_data = fetch_data(movie_id, TMDB_API_URL_CREWS)
#         keyword_data = fetch_data(movie_id, TMDB_API_URL_KEYWORDS)
        
#         if movie_data and crew_data and keyword_data:
#             send_to_kafka(producer, movie_data, TOPIC_MOVIES)
#             send_to_kafka(producer, crew_data, TOPIC_CREWS)
#             send_to_kafka(producer, keyword_data, TOPIC_KEYWORDS)
#         else:
#             print(f"Kh√¥ng l·∫•y ƒë·ªß d·ªØ li·ªáu cho ID {movie_id}")
    
#     for movie_id in movie_ids:
#         t = threading.Thread(target=worker, args=(movie_id,))
#         t.start()
#         threads.append(t)
    
#     for t in threads:
#         t.join()
#     print("üî• Ho√†n t·∫•t x·ª≠ l√Ω API, ti·∫øp t·ª•c l·∫•y ID m·ªõi...")
def process_movie_ids(movie_ids):
    producer = Producer(KAFKA_CONFIG)
    threads = []

    def worker(movie_id):
        movie_data = fetch_data(movie_id, TMDB_API_URL_MOVIES)
        crew_data = fetch_data(movie_id, TMDB_API_URL_CREWS)
        keyword_data = fetch_data(movie_id, TMDB_API_URL_KEYWORDS)
        
        if movie_data and crew_data and keyword_data:
            send_to_kafka(producer, movie_data, TOPIC_MOVIES)
            send_to_kafka(producer, crew_data, TOPIC_CREWS)
            send_to_kafka(producer, keyword_data, TOPIC_KEYWORDS)
        else:
            print(f"Kh√¥ng l·∫•y ƒë·ªß d·ªØ li·ªáu cAho ID {movie_id}")
    
    for movie_id in movie_ids:
        t = threading.Thread(target=worker, args=(movie_id,))
        t.start()
        threads.append(t)
    
    for t in threads:
        t.join()

    # üëá Th√™m d√≤ng n√†y ƒë·ªÉ ƒë·∫£m b·∫£o m·ªçi d·ªØ li·ªáu ƒë·ªÅu ƒë∆∞·ª£c g·ª≠i ƒëi
    producer.flush()

    print("üî• Ho√†n t·∫•t x·ª≠ l√Ω API, ti·∫øp t·ª•c l·∫•y ID m·ªõi...")

# ---------------------------
# Thu th·∫≠p ID phim t·ª´ Selenium
# ---------------------------
# all_movie_ids = set()
# max_loops = 50  # S·ªë l·∫ßn l·∫•y d·ªØ li·ªáu
# for _ in range(max_loops):
#     movie_elements = driver.find_elements(By.CLASS_NAME, "card.style_1")
#     new_ids = set()
    
#     for elem in movie_elements:
#         try:
#             movie_id = elem.find_element(By.CLASS_NAME, "options").get_attribute("data-id")
#             if movie_id:
#                 new_ids.add(movie_id)
#         except:
#             pass
    
#     # N·∫øu c√≥ ID m·ªõi, x·ª≠ l√Ω tr∆∞·ªõc khi ti·∫øp t·ª•c cu·ªôn trang
#     if new_ids:
#         all_movie_ids.update(new_ids)
#         print(f"üîÑ T√¨m th·∫•y {len(new_ids)} ID m·ªõi, g·ª≠i ƒë·∫øn API...")
#         process_movie_ids(new_ids)
    
#     # Cu·ªôn xu·ªëng cu·ªëi trang ƒë·ªÉ l·∫•y th√™m d·ªØ li·ªáu
#     driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
#     time.sleep(2)
try:
    load_more_link = driver.find_element(By.CSS_SELECTOR, "a.no_click.load_more[href*='page=2']")
    if load_more_link.is_displayed():
        print("üîò ƒê√£ t√¨m th·∫•y n√∫t Load More. ƒêang click l·∫ßn ƒë·∫ßu...")
        ActionChains(driver).move_to_element(load_more_link).click().perform()
        print("üîç ƒê√£ click n√∫t Load m·ªèe l·∫ßn ƒë·∫ßu!")
        time.sleep(2)  # ƒê·ª£i trang load th√™m n·ªôi dung
except Exception as e:
    print(f"‚ùå Kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng th·ªÉ click Load More: {e}")
all_movie_ids = set()
max_loops = 20  # S·ªë l·∫ßn l·∫•y d·ªØ li·ªáu
haha = 2
for _ in range(max_loops):
    movie_elements = driver.find_elements(By.CLASS_NAME, "card.style_1")
    new_ids = set()
    for elem in movie_elements:
        try:
            movie_id = elem.find_element(By.CLASS_NAME, "options").get_attribute("data-id")
            if movie_id and movie_id not in all_movie_ids:
                new_ids.add(movie_id)
        except:
            pass
    # üëá N·∫øu kh√¥ng c√≥ ID m·ªõi, d·ª´ng loop
    if not new_ids:
        print("üö´ Kh√¥ng c√≤n ID m·ªõi, d·ª´ng thu th·∫≠p s·ªõm.")
        break

    print(f"üîÑ T√¨m th·∫•y {len(new_ids)} ID m·ªõi, g·ª≠i ƒë·∫øn API...")
    process_movie_ids(new_ids)
    all_movie_ids.update(new_ids)  # ‚úÖ C·∫≠p nh·∫≠t sau khi g·ª≠i xong
    time.sleep(2)
    # driver.execute_script("window.scrollBy(0, 100000);")
    try:
        load_more_link = driver.find_element(By.CSS_SELECTOR, f"a.no_click.load_more[href*='page={haha}']")
    except:
            break
    if load_more_link.is_displayed():
        print("üîò ƒê√£ t√¨m th·∫•y n√∫t Load More 2 . ƒêang click l·∫ßn ƒë·∫ß   222222222222     u...")
        ActionChains(driver).move_to_element(load_more_link).click().perform()
        print("üîç ƒê√£ click n√∫t Load m·ªèe l·∫ßn       222222222222222 ƒë·∫ßu!")
        time.sleep(2)  # ƒê·ª£i trang load th√™m n·ªôi dung
    haha = haha + 1
    time.sleep(2)
driver.quit()
print("‚úÖ Ho√†n th√†nh qu√° tr√¨nh thu th·∫≠p d·ªØ li·ªáu!")
