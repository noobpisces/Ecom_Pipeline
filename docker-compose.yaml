services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres-e
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - bridge
  
  pgadmin:
    container_name: pgadmin4_cont
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin   # dùng named volume
    depends_on:
      - postgres
    networks:
      - bridge


  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: ./Dockerfile
    container_name: airflow-webserver-e
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      _AIRFLOW_WWW_USER_USERNAME: tuan
      _AIRFLOW_WWW_USER_PASSWORD: tuan
    user: "50000:0"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/jobs:/opt/airflow/jobs
      - ./jars:/opt/airflow/jars
      - ./airflow/requirements.txt:/requirements.txt
    ports:
      - "8080:8080"
    command: bash -c "airflow db migrate && airflow users create --username admin --firstname Tuan --lastname Nguyen --role Admin --email hihatuan@gmail.com --password admin && exec airflow webserver"
    networks:
      - bridge

  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: ./Dockerfile
    container_name: airflow-scheduler-e
    depends_on:
      postgres:
        condition: service_healthy
      airflow-webserver:
        condition: service_started
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__PARALLELISM: "128"            # tổng số task RUNNING tối đa trong hệ thống
      AIRFLOW__CORE__MAX_ACTIVE_TASKS_PER_DAG: "60" # số task RUNNING tối đa cho mỗi DAG
      AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG: "4"   # nếu 1 DAG có nhiều run chồng nhau
    user: "50000:0"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/jobs:/opt/airflow/jobs
      - ./jars:/opt/airflow/jars
      - ./airflow/requirements.txt:/requirements.txt
    command: scheduler
    networks:
      - bridge

  clickhouse:
    image: clickhouse/clickhouse-server:24.8
    container_name: clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    ports:
      - "8123:8123"
      - "9000:9000"
    # Dùng named volumes thay vì bind-mount
    volumes:
      - ch_data:/var/lib/clickhouse
      - ch_logs:/var/log/clickhouse-server
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: admin
      CLICKHOUSE_PASSWORD: 123456
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8123/ping || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - bridge

  tabix:
    image: spoonest/clickhouse-tabix-web-client
    container_name: tabix
    ports:
      - "8124:80"   # mở UI trên http://localhost:8124
    networks:
      - bridge


  minio:
    image: minio/minio:latest
    container_name: minio-e
    ports: ["9100:9000","9001:9001"]
    environment:
      MINIO_ROOT_USER: minio123
      MINIO_ROOT_PASSWORD: minio123
      MINIO_ACCESS_KEY: minio123
      MINIO_SECRET_KEY: minio123
    command: server /data --console-address ":9001"
    networks: [bridge]

  spark-master:
    build:
      context: ./spark
      dockerfile: ./Dockerfile
    container_name: spark-master-e
    ports: ["7077:7077","8081:8080"]
    expose: ["7077"]
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    volumes:
      - ./spark/conf/log4j.properties:/opt/bitnami/spark/conf/log4j.properties
      - ./spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./jars:/opt/bitnami/spark/custom-jars
      - ./spark_consumer:/opt/bitnami/spark/spark_consumer
    networks: [bridge]

  spark-worker-1:
    image: docker.io/bitnami/spark:3.5.0
    container_name: spark-worker-1-e
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=3G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    depends_on: [spark-master]
    networks: [bridge]

  spark-worker-2:
    image: docker.io/bitnami/spark:3.5.0
    container_name: spark-worker-2-e
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=3G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    depends_on: [spark-master]
    networks: [bridge]

  spark-worker-3:
    image: docker.io/bitnami/spark:3.5.0
    container_name: spark-worker-3-e
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=3G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    depends_on: [spark-master]
    networks: [bridge]

  jupyter-spark:
    image: jupyter/pyspark-notebook:spark-3.5.0
    container_name: notebook-e
    ports: ["8888:8888","4040-4080:4040-4080"]
    volumes:
      - ./jupyter/notebooks:/home/jovyan/work/
      - ./jars:/home/jovyan/jars/
    networks: [bridge]
    depends_on: [spark-master]
    user: root
    command: start-notebook.sh --NotebookApp.token='' --NotebookApp.allow_root=True


  dbt:
    image: python:3.11-slim
    container_name: dbt
    working_dir: /usr/app
    entrypoint: bash -lc "pip install --no-cache-dir dbt-core dbt-clickhouse && tail -f /dev/null"
    depends_on: [clickhouse]
    volumes:
      - ./dbt:/usr/app      # thư mục dự án dbt của bạn
    environment:
      - DBT_PROFILES_DIR=/usr/app/.dbt
    networks: [bridge]
networks:
  bridge:
    driver: bridge
volumes:
  pgadmin_data: {}
  ch_data:
  ch_logs: